/* Integrantes :  Maximo Olguin Muñoz y Jonatan Peredo

----------- PROYECTO RIEGO AUTOMATIZADO PARA MACETAS --------------------


El sistema de riego automatizado para macetas es un producto pensado para que se pueda
regar automático las plantas en macetas incorporando:
- Dos sensores (uno en cada lado) ldr fotoresistor de intensidad de luz.
- Una bomba de agua de 3,3 a 5v.
- Y un motor paso a paso unipolar de 12v.
- Un sensor de humedad y temperatura de suelo.
Los sensor de luz, hara que las plantas no se rieguen a horas de máxima luz solar, y ademas al detectar 
que pasado un tiempo determinado en el sol, movera la maceta a la sombra gracias al motor, 
y asi tambien debera volver a posicion donde le de luz solar pasado tanto tiempo determinado.
Gracias al sensor de humeda y temperatura de suelo se podra regar cuando sea necesario, 
*/

//CONFIGURACION DE BOBINAS                                         
#define PIN_B1                      11         // marron
#define PIN_B2                      10         // amarillo
#define PIN_B3                      9         // negro
#define PIN_B4                      8         // naranja - gris
// MARRON _ AMARILLO _ NEGRO _ NARANJA     motor 12V

#define CONFIG_B1                   pinMode(PIN_B1, OUTPUT)
#define CONFIG_B2                   pinMode(PIN_B2, OUTPUT)
#define CONFIG_B3                   pinMode(PIN_B3, OUTPUT)
#define CONFIG_B4                   pinMode(PIN_B4, OUTPUT)

#define PRENDER_B1(x)               digitalWrite(PIN_B1, x)
#define PRENDER_B2(x)               digitalWrite(PIN_B2, x)
#define PRENDER_B3(x)               digitalWrite(PIN_B3, x)
#define PRENDER_B4(x)               digitalWrite(PIN_B4, x)


// 12 pasos 4 steps para dar 360 grados 
// 360 / 12 = 30 grados hace por pasos de 4 steps
// entonces si 30 grados hace cada paso de 4 steps, y lo dividis por 4 ya que la secuencia es de 4 pasos 30 / 4 = 7,5 
// 7,5 grados me daria como resultado osea que ese es los grados que hace por cada paso individual.


/*
#include <DHT.h>    // Librería para el sensor de temperatura y humedad
#define DHTPIN 2    // Pin digital al que está conectado el sensor DHT
#define DHTTYPE DHT11   // Tipo de sensor DHT (DHT11 o DHT22)
DHT dht(DHTPIN, DHTTYPE);
*/


// configuracion fotoresistores ldr
#define FOTORESISTOR_PIN             A1    
#define CONFIG_FOTORESISTOR          pinMode(FOTORESISTOR_PIN, INPUT)  
#define LEER_FOTORESISTOR            analogRead(FOTORESISTOR_PIN)


#define FOTORESISTOR2_PIN             A2    // ldr pelado
#define CONFIG_FOTORESISTOR2          pinMode(FOTORESISTOR2_PIN, INPUT)  
#define LEER_FOTORESISTOR2            analogRead(FOTORESISTOR2_PIN)




void Fotoresistor1(){
  // menor valor mas luz
  static unsigned long antMillis = 0;        
  if(millis() - antMillis < INTERVALO) return;
  antMillis = millis();

  int dato = LEER_FOTORESISTOR;
  if(dato < 200) mucha_luz1 = 1;
  else mucha_luz1 = 0;
  Serial.println("EL LDR DE NOSOTROS ");
  Serial.println(dato);
  if(mucha_luz1) Giro_Izquierda();
}
void Fotoresistor2(){
  //
  static unsigned long antMillis = 0;        
  if(millis() - antMillis < INTERVALO) return;
  antMillis = millis();

  int dato1 = LEER_FOTORESISTOR2;
  if(dato1 > 850) mucha_luz2 = 1;
  else mucha_luz2 = 0;

  Serial.println("EL LDR DEL QUIQUE ");
  Serial.println(dato1);

  if(mucha_luz2) pasos_der=4;
}



void Riego(){
  if(mucha_luz1 == 1 || mucha_luz2 == 1) return;  // si detecta mucha luz no riega

  bool suelo_seco = 0;
  if(LEER_HUMEDAD) suelo_seco = 0;          //si es true(1) detecta humedad y si es false(0) detecta seco
  else suelo_seco = 1;
  ACTUALIZAR_RIEGO(suelo_seco);
}

void Giro_Motor()
  {
  static unsigned long millis_ant=0;
  
  //Dar 4 pasos, esperando 25ms entre paso y paso
  if(!pasos_der) return;

  if(millis()-millis_ant < 25) return;
  millis_ant=millis();

  AvanzarPaso();
  pasos_der--;
  }

void AvanzarPaso()
  {
  static char paso=0;

   switch(paso)
    {
    case 0: PRENDER_B1(0);   PRENDER_B2(0);   PRENDER_B3(1);   PRENDER_B4(1);   break;
    case 1: PRENDER_B1(1);   PRENDER_B2(0);   PRENDER_B3(0);   PRENDER_B4(1);   break;
    case 2: PRENDER_B1(1);   PRENDER_B2(1);   PRENDER_B3(0);   PRENDER_B4(0);   break;
    case 3: PRENDER_B1(0);   PRENDER_B2(1);   PRENDER_B3(1);   PRENDER_B4(0);   break;
    default: paso=-1; break;
    }
  paso++;
  if(paso>3) paso=0;
  }


/*   en mantenimiento esta parte
void Giro_Izquierda(){

   for (int i=0; i<1; i++){
   PRENDER_MARRON1(1);   PRENDER_AMARILLO2(1);   PRENDER_NEGRO3(0);   PRENDER_GRIS4(0);   delay(25); 
   PRENDER_MARRON1(1);   PRENDER_AMARILLO2(0);   PRENDER_NEGRO3(0);   PRENDER_GRIS4(1);   delay(25);
   PRENDER_MARRON1(0);   PRENDER_AMARILLO2(0);   PRENDER_NEGRO3(1);   PRENDER_GRIS4(1);   delay(25);
   PRENDER_MARRON1(0);   PRENDER_AMARILLO2(1);   PRENDER_NEGRO3(1);   PRENDER_GRIS4(0);   delay(25);
  }
}
*/

void LedTest()
  {
  static int ledState= 0;
  static unsigned long antMillis = 0;        

  //Si no se cumple tal condicion, retorna
  if(millis() - antMillis < INTERVALO_LED_TEST) return;
  antMillis = millis();

  ledState = !ledState;
  ACTUALIZAR_LED_TEST(ledState);
}
